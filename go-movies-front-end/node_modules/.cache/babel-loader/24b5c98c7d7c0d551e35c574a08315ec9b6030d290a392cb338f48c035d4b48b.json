{"ast":null,"code":"var _jsxFileName = \"D:\\\\Go\\\\React-With-Go\\\\go-movies-front-end\\\\src\\\\components\\\\EditMovie.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { useNavigate, useOutletContext, useParams } from \"react-router-dom\";\n// import Input from \"./form/Input\";\n// import Select from \"./form/Select\";\n// import TextArea from \"./form/TextArea\";\n// import Checkbox from \"./form/Checkbox\";\n// import { Swal } from \"sweetalert2\";\n\n// const EditMovie = () => {\n//   const navigate = useNavigate();\n//   const { jwtToken } = useOutletContext();\n\n//   const [error, setError] = useState(null);\n\n//   const [errors, setErrors] = useState([]);\n\n//   const mpaaOptions = [\n//     { id: \"G\", value: \"G\" },\n//     { id: \"PG\", value: \"PG\" },\n//     { id: \"PG13\", value: \"PG13\" },\n//     { id: \"R\", value: \"R\" },\n//     { id: \"NC17\", value: \"NC17\" },\n//     { id: \"18A\", value: \"18A\" },\n//   ];\n\n//   const hasError = (key) => {\n//     return errors.indexOf(key) !== -1;\n//   };\n\n//   const [movie, setMovie] = useState({\n//     id: 0,\n//     title: \"\",\n//     release_date: \"\",\n//     runtime: \"\",\n//     mpaa_rating: \"\",\n//     description: \"\",\n//     genres: [],\n//     genres_array: [Array(13).fill(false)],\n//   });\n\n//   ///// Get the ID from the URL by using useParams() hook......\n//   let { id } = useParams();\n\n//   if (id === undefined) {\n//     id = 0;\n//   }\n\n//   useEffect(() => {\n//     if (jwtToken === \"\") {\n//       navigate(\"/login\");\n//       return;\n//     }\n\n//     if (id === 0) {\n//       /// Adding a movie....\n//       setMovie({\n//         id: 0,\n//         title: \"\",\n//         release_date: \"\",\n//         runtime: \"\",\n//         mpaa_rating: \"\",\n//         description: \"\",\n//         genres: [],\n//         genres_array: [Array(13).fill(false)],\n//       });\n\n//       const headers = new Headers();\n//       headers.append(\"Content-Type\", \"application/json\");\n\n//       const requestOptions = {\n//         method: \"GET\",\n//         headers: headers,\n//       };\n\n//       fetch(`/genres`, requestOptions)\n//         .then((response) => response.json())\n//         .then((data) => {\n//           const checks = [];\n\n//           data.forEach((g) => {\n//             checks.push({ id: g.id, checked: false, genre: g.genre });\n//           });\n\n//           setMovie((m) => ({\n//             ...m,\n//             genres: checks,\n//             genres_array: [],\n//           }));\n//         })\n//         .catch((err) => {\n//           console.log(err);\n//         });\n//     } else {\n//       /// edit an existing movie....\n//     }\n//   }, [id, jwtToken, navigate]);\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     let errors = [];\n\n//     let required = [\n//       {\n//         field: movie.title,\n//         name: \"title\",\n//       },\n//       {\n//         field: movie.release_date,\n//         name: \"release_date\",\n//       },\n//       {\n//         field: movie.runtime,\n//         name: \"runtime\",\n//       },\n//       {\n//         field: movie.description,\n//         name: \"description\",\n//       },\n//       {\n//         field: movie.mpaa_rating,\n//         name: \"mpaa_rating\",\n//       },\n//     ];\n\n//     required.forEach(function (obj) {\n//       if (obj.field === \"\") {\n//         errors.push(obj.name);\n//       }\n//     });\n\n//     if (movie.genres_array.length === 0) {\n//       Swal.fire({\n//         title: \"Error!\",\n//         text: \"You must choose atleast one genre\",\n//         icon: \"error\",\n//         confirmButtonText: \"OK\",\n//       });\n//       errors.push(\"genres\");\n//     }\n//     setErrors(errors);\n\n//     if (errors.length > 0) {\n//       return false;\n//     }\n\n//     /// Passed the validation , so save the changes....\n//     const headers = new Headers();\n//     headers.append(\"Content-Type\", \"application/json\");\n//     headers.append(\"Authorization\", \"Bearer \" + jwtToken);\n\n//     /// Assume that we are adding a new movie......\n//     let method = \"PUT\";\n\n//     if (movie.id > 0) {\n//       method = \"PATCH\"; // Here PATCH is for updating a movie and PUT is for inserting something new...\n//     }\n\n//     const requestBody = movie;\n//     // We need to convert the values in JSON for release date (to date)\n//     // And for run time to int\n\n//     requestBody.release_date = new Date(movie.release_date);\n\n//     requestBody.runtime = parseInt(movie.runtime, 10); // Here 10 represents the base 10\n\n//     let requestOptions = {\n//       body: JSON.stringify(requestBody),\n//       method: method,\n//       headers: headers,\n//       credentials: \"include\",\n//     };\n\n//     fetch(`/admin/movies/${movie.id}`, requestOptions)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         if (data.error) {\n//           console.log(data.error);\n//         } else {\n//           navigate(\"/manage-catalogue\");\n//         }\n//       })\n//       .catch((err) => {\n//         console.log(err);\n//       });\n//   };\n\n//   const handleChange = (event) => {\n//     let value = event.target.value;\n//     let name = event.target.name;\n//     setMovie({\n//       ...movie,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleCheck = (event, position) => {\n//     console.log(\"handleCheck called\");\n//     console.log(\"value in handleCheck:\", event.target.value);\n//     console.log(\"Checked is\", event.target.checked);\n//     console.log(\"position is\", position);\n\n//     let tmpArr = movie.genres;\n//     tmpArr[position].checked = !tmpArr[position].checked;\n\n//     let tmpIDs = movie.genres_array;\n//     if (!event.target.checked) {\n//       tmpIDs.splice(tmpIDs.indexOf(event.target.value));\n//     } else {\n//       tmpIDs.push(parseInt(event.target.value, 10));\n//     }\n\n//     setMovie({\n//       ...movie,\n//       genres_array: tmpIDs,\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Add/Edit a movie</h2>\n//       <hr />\n//       <pre>{JSON.stringify(movie, null, 3)}</pre>\n\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"hidden\" name=\"id\" value={movie.id} id=\"id\"></input>\n//         <Input\n//           title={\"Title\"}\n//           className={\"form-control\"}\n//           type={\"text\"}\n//           name={\"title\"}\n//           value={movie.title}\n//           onChange={handleChange(\"title\")}\n//           errorDiv={hasError(\"title\") ? \"text-danger\" : \"d-none\"}\n//           errorMsg={\"Please enter a title\"}\n//         />\n\n//         <Input\n//           title={\"Release Date\"}\n//           className={\"form-control\"}\n//           type={\"release_date\"}\n//           name={\"title\"}\n//           value={movie.release_date}\n//           onChange={handleChange(\"release_date\")}\n//           errorDiv={hasError(\"release_date\") ? \"text-danger\" : \"d-none\"}\n//           errorMsg={\"Please enter a release date\"}\n//         />\n\n//         <Input\n//           title={\"Runtime\"}\n//           className={\"form-control\"}\n//           type={\"text\"}\n//           name={\"runtime\"}\n//           value={movie.runtime}\n//           onChange={handleChange(\"runtime\")}\n//           errorDiv={hasError(\"runtime\") ? \"text-danger\" : \"d-none\"}\n//           errorMsg={\"Please enter a runtime\"}\n//         />\n\n//         <Select\n//           title={\"MPAA Rating\"}\n//           name={\"mpaa_rating\"}\n//           options={mpaaOptions}\n//           onChange={handleChange(\"mpaa_rating\")}\n//           placeHolder={\"Choose...\"}\n//           errorMsg={\"Please Choose\"}\n//           errorDiv={hasError(\"mpaa_rating\") ? \"text-danger\" : \"d-none\"}\n//         />\n\n//         <TextArea\n//           title={\"Description\"}\n//           name={\"description\"}\n//           value={movie.description}\n//           rows={\"3\"}\n//           onChange={handleChange(\"description\")}\n//           errorMsg={\"Please enter a description\"}\n//           errorDiv={hasError(\"description\") ? \"text-danger\" : \"d-none\"}\n//         />\n\n//         <hr />\n\n//         <h3>Genres</h3>\n//         {movie.genres && movie.genres.length > 1 && (\n//           <>\n//             {Array.from(movie.genres).map((g, index) => (\n//               <Checkbox\n//                 title={g.genre}\n//                 name={\"genre\"}\n//                 key={index}\n//                 id={\"genre-\" + index}\n//                 onChange={(event) => handleCheck(event, index)}\n//                 value={g.id}\n//                 checked={movie.genres[index].checked}\n//               />\n//             ))}\n//           </>\n//         )}\n\n//         <hr />\n\n//         <button className=\"btn btn-primary\">Save</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default EditMovie;\n\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useOutletContext, useParams } from \"react-router-dom\";\nimport Input from \"./form/Input\";\nimport Select from \"./form/Select\";\nimport TextArea from \"./form/TextArea\";\nimport Checkbox from \"./form/Checkbox\";\nimport { Swal } from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EditMovie = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    jwtToken\n  } = useOutletContext();\n  const [error, setError] = useState(null);\n  const [errors, setErrors] = useState([]);\n  const mpaaOptions = [{\n    id: \"G\",\n    value: \"G\"\n  }, {\n    id: \"PG\",\n    value: \"PG\"\n  }, {\n    id: \"PG13\",\n    value: \"PG13\"\n  }, {\n    id: \"R\",\n    value: \"R\"\n  }, {\n    id: \"NC17\",\n    value: \"NC17\"\n  }, {\n    id: \"18A\",\n    value: \"18A\"\n  }];\n  const hasError = key => {\n    return errors.indexOf(key) !== -1;\n  };\n  const [movie, setMovie] = useState({\n    id: 0,\n    title: \"\",\n    release_date: \"\",\n    runtime: \"\",\n    mpaa_rating: \"\",\n    description: \"\",\n    genres: [],\n    genres_array: [Array(13).fill(false)]\n  });\n  let {\n    id\n  } = useParams();\n  if (id === undefined) {\n    id = 0;\n  }\n  useEffect(() => {\n    if (jwtToken === \"\") {\n      navigate(\"/login\");\n      return;\n    }\n    if (id === 0) {\n      /// Adding a movie....\n      setMovie({\n        id: 0,\n        title: \"\",\n        release_date: \"\",\n        runtime: \"\",\n        mpaa_rating: \"\",\n        description: \"\",\n        genres: [],\n        genres_array: [Array(13).fill(false)]\n      });\n      const headers = new Headers();\n      headers.append(\"Content-Type\", \"application/json\");\n      const requestOptions = {\n        method: \"GET\",\n        headers: headers\n      };\n      fetch(`/genres`, requestOptions).then(response => response.json()).then(data => {\n        const checks = [];\n        data.forEach(g => {\n          checks.push({\n            id: g.id,\n            checked: false,\n            genre: g.genre\n          });\n        });\n        setMovie(m => ({\n          ...m,\n          genres: checks,\n          genres_array: []\n        }));\n      }).catch(err => {\n        console.log(err);\n      });\n    } else {\n      // Edit existing movie logic\n      const headers = new Headers();\n      headers.append(\"Content-Type\", \"application/json\");\n      headers.append(\"Authorization\", \"Bearer \" + jwtToken);\n      const requestOptions = {\n        method: \"GET\",\n        headers: headers\n      };\n      fetch(`/admin/movies/${id}`, requestOptions).then(response => {\n        if (response.status !== 200) {\n          setError(\"Invalid response code: \" + response.status);\n        }\n        return response.json();\n      }).then(data => {\n        /// Fix the release date...\n        data.movie.release_date = new Date();\n      });\n    }\n  }, [id, jwtToken, navigate]);\n  const handleSubmit = event => {\n    event.preventDefault();\n    let errors = [];\n    let required = [{\n      field: movie.title,\n      name: \"title\"\n    }, {\n      field: movie.release_date,\n      name: \"release_date\"\n    }, {\n      field: movie.runtime,\n      name: \"runtime\"\n    }, {\n      field: movie.description,\n      name: \"description\"\n    }, {\n      field: movie.mpaa_rating,\n      name: \"mpaa_rating\"\n    }];\n    required.forEach(obj => {\n      if (obj.field === \"\") {\n        errors.push(obj.name);\n      }\n    });\n    if (movie.genres_array.length === 0) {\n      Swal.fire({\n        title: \"Error!\",\n        text: \"You must choose at least one genre\",\n        icon: \"error\",\n        confirmButtonText: \"OK\"\n      });\n      errors.push(\"genres\");\n    }\n    setErrors(errors);\n    if (errors.length > 0) {\n      return false;\n    }\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    headers.append(\"Authorization\", \"Bearer \" + jwtToken);\n    let method = \"PUT\";\n    if (movie.id > 0) {\n      method = \"PATCH\";\n    }\n    const requestBody = movie;\n    requestBody.release_date = new Date(movie.release_date);\n    requestBody.runtime = parseInt(movie.runtime, 10);\n    let requestOptions = {\n      body: JSON.stringify(requestBody),\n      method: method,\n      headers: headers,\n      credentials: \"include\"\n    };\n    fetch(`/admin/movies/${movie.id}`, requestOptions).then(response => response.json()).then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        navigate(\"/manage-catalogue\");\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  const handleChange = event => {\n    let value = event.target.value;\n    let name = event.target.name;\n    setMovie({\n      ...movie,\n      [name]: value\n    });\n  };\n  const handleCheck = (event, position) => {\n    let tmpArr = movie.genres;\n    tmpArr[position].checked = !tmpArr[position].checked;\n    let tmpIDs = movie.genres_array;\n    if (!event.target.checked) {\n      tmpIDs.splice(tmpIDs.indexOf(event.target.value), 1);\n    } else {\n      tmpIDs.push(parseInt(event.target.value, 10));\n    }\n    setMovie({\n      ...movie,\n      genres_array: tmpIDs\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add/Edit a movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"hidden\",\n        name: \"id\",\n        value: movie.id,\n        id: \"id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        title: \"Title\",\n        className: \"form-control\",\n        type: \"text\",\n        name: \"title\",\n        value: movie.title,\n        onChange: handleChange,\n        errorDiv: hasError(\"title\") ? \"text-danger\" : \"d-none\",\n        errorMsg: \"Please enter a title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        title: \"Release Date\",\n        className: \"form-control\",\n        type: \"date\",\n        name: \"release_date\",\n        value: movie.release_date,\n        onChange: handleChange,\n        errorDiv: hasError(\"release_date\") ? \"text-danger\" : \"d-none\",\n        errorMsg: \"Please enter a release date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        title: \"Runtime\",\n        className: \"form-control\",\n        type: \"text\",\n        name: \"runtime\",\n        value: movie.runtime,\n        onChange: handleChange,\n        errorDiv: hasError(\"runtime\") ? \"text-danger\" : \"d-none\",\n        errorMsg: \"Please enter a runtime\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        title: \"MPAA Rating\",\n        name: \"mpaa_rating\",\n        options: mpaaOptions,\n        onChange: handleChange,\n        placeHolder: \"Choose...\",\n        errorMsg: \"Please Choose\",\n        errorDiv: hasError(\"mpaa_rating\") ? \"text-danger\" : \"d-none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n        title: \"Description\",\n        name: \"description\",\n        value: movie.description,\n        rows: \"3\",\n        onChange: handleChange,\n        errorMsg: \"Please enter a description\",\n        errorDiv: hasError(\"description\") ? \"text-danger\" : \"d-none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 9\n      }, this), movie.genres && movie.genres.length > 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: Array.from(movie.genres).map((g, index) => /*#__PURE__*/_jsxDEV(Checkbox, {\n          title: g.genre,\n          name: \"genre\",\n          id: \"genre-\" + index,\n          onChange: event => handleCheck(event, index),\n          value: g.id,\n          checked: movie.genres[index].checked\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 15\n        }, this))\n      }, void 0, false), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n};\n_s(EditMovie, \"xrNCrDZeFfDMMJ6Gtuc5sk2JbLI=\", false, function () {\n  return [useNavigate, useOutletContext, useParams];\n});\n_c = EditMovie;\nexport default EditMovie;\nvar _c;\n$RefreshReg$(_c, \"EditMovie\");","map":{"version":3,"names":["useEffect","useState","useNavigate","useOutletContext","useParams","Input","Select","TextArea","Checkbox","Swal","jsxDEV","_jsxDEV","Fragment","_Fragment","EditMovie","_s","navigate","jwtToken","error","setError","errors","setErrors","mpaaOptions","id","value","hasError","key","indexOf","movie","setMovie","title","release_date","runtime","mpaa_rating","description","genres","genres_array","Array","fill","undefined","headers","Headers","append","requestOptions","method","fetch","then","response","json","data","checks","forEach","g","push","checked","genre","m","catch","err","console","log","status","Date","handleSubmit","event","preventDefault","required","field","name","obj","length","fire","text","icon","confirmButtonText","requestBody","parseInt","body","JSON","stringify","credentials","handleChange","target","handleCheck","position","tmpArr","tmpIDs","splice","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","className","onChange","errorDiv","errorMsg","options","placeHolder","rows","from","map","index","_c","$RefreshReg$"],"sources":["D:/Go/React-With-Go/go-movies-front-end/src/components/EditMovie.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\r\n// import { useNavigate, useOutletContext, useParams } from \"react-router-dom\";\r\n// import Input from \"./form/Input\";\r\n// import Select from \"./form/Select\";\r\n// import TextArea from \"./form/TextArea\";\r\n// import Checkbox from \"./form/Checkbox\";\r\n// import { Swal } from \"sweetalert2\";\r\n\r\n// const EditMovie = () => {\r\n//   const navigate = useNavigate();\r\n//   const { jwtToken } = useOutletContext();\r\n\r\n//   const [error, setError] = useState(null);\r\n\r\n//   const [errors, setErrors] = useState([]);\r\n\r\n//   const mpaaOptions = [\r\n//     { id: \"G\", value: \"G\" },\r\n//     { id: \"PG\", value: \"PG\" },\r\n//     { id: \"PG13\", value: \"PG13\" },\r\n//     { id: \"R\", value: \"R\" },\r\n//     { id: \"NC17\", value: \"NC17\" },\r\n//     { id: \"18A\", value: \"18A\" },\r\n//   ];\r\n\r\n//   const hasError = (key) => {\r\n//     return errors.indexOf(key) !== -1;\r\n//   };\r\n\r\n//   const [movie, setMovie] = useState({\r\n//     id: 0,\r\n//     title: \"\",\r\n//     release_date: \"\",\r\n//     runtime: \"\",\r\n//     mpaa_rating: \"\",\r\n//     description: \"\",\r\n//     genres: [],\r\n//     genres_array: [Array(13).fill(false)],\r\n//   });\r\n\r\n//   ///// Get the ID from the URL by using useParams() hook......\r\n//   let { id } = useParams();\r\n\r\n//   if (id === undefined) {\r\n//     id = 0;\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     if (jwtToken === \"\") {\r\n//       navigate(\"/login\");\r\n//       return;\r\n//     }\r\n\r\n//     if (id === 0) {\r\n//       /// Adding a movie....\r\n//       setMovie({\r\n//         id: 0,\r\n//         title: \"\",\r\n//         release_date: \"\",\r\n//         runtime: \"\",\r\n//         mpaa_rating: \"\",\r\n//         description: \"\",\r\n//         genres: [],\r\n//         genres_array: [Array(13).fill(false)],\r\n//       });\r\n\r\n//       const headers = new Headers();\r\n//       headers.append(\"Content-Type\", \"application/json\");\r\n\r\n//       const requestOptions = {\r\n//         method: \"GET\",\r\n//         headers: headers,\r\n//       };\r\n\r\n//       fetch(`/genres`, requestOptions)\r\n//         .then((response) => response.json())\r\n//         .then((data) => {\r\n//           const checks = [];\r\n\r\n//           data.forEach((g) => {\r\n//             checks.push({ id: g.id, checked: false, genre: g.genre });\r\n//           });\r\n\r\n//           setMovie((m) => ({\r\n//             ...m,\r\n//             genres: checks,\r\n//             genres_array: [],\r\n//           }));\r\n//         })\r\n//         .catch((err) => {\r\n//           console.log(err);\r\n//         });\r\n//     } else {\r\n//       /// edit an existing movie....\r\n//     }\r\n//   }, [id, jwtToken, navigate]);\r\n\r\n//   const handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n\r\n//     let errors = [];\r\n\r\n//     let required = [\r\n//       {\r\n//         field: movie.title,\r\n//         name: \"title\",\r\n//       },\r\n//       {\r\n//         field: movie.release_date,\r\n//         name: \"release_date\",\r\n//       },\r\n//       {\r\n//         field: movie.runtime,\r\n//         name: \"runtime\",\r\n//       },\r\n//       {\r\n//         field: movie.description,\r\n//         name: \"description\",\r\n//       },\r\n//       {\r\n//         field: movie.mpaa_rating,\r\n//         name: \"mpaa_rating\",\r\n//       },\r\n//     ];\r\n\r\n//     required.forEach(function (obj) {\r\n//       if (obj.field === \"\") {\r\n//         errors.push(obj.name);\r\n//       }\r\n//     });\r\n\r\n//     if (movie.genres_array.length === 0) {\r\n//       Swal.fire({\r\n//         title: \"Error!\",\r\n//         text: \"You must choose atleast one genre\",\r\n//         icon: \"error\",\r\n//         confirmButtonText: \"OK\",\r\n//       });\r\n//       errors.push(\"genres\");\r\n//     }\r\n//     setErrors(errors);\r\n\r\n//     if (errors.length > 0) {\r\n//       return false;\r\n//     }\r\n\r\n//     /// Passed the validation , so save the changes....\r\n//     const headers = new Headers();\r\n//     headers.append(\"Content-Type\", \"application/json\");\r\n//     headers.append(\"Authorization\", \"Bearer \" + jwtToken);\r\n\r\n//     /// Assume that we are adding a new movie......\r\n//     let method = \"PUT\";\r\n\r\n//     if (movie.id > 0) {\r\n//       method = \"PATCH\"; // Here PATCH is for updating a movie and PUT is for inserting something new...\r\n//     }\r\n\r\n//     const requestBody = movie;\r\n//     // We need to convert the values in JSON for release date (to date)\r\n//     // And for run time to int\r\n\r\n//     requestBody.release_date = new Date(movie.release_date);\r\n\r\n//     requestBody.runtime = parseInt(movie.runtime, 10); // Here 10 represents the base 10\r\n\r\n//     let requestOptions = {\r\n//       body: JSON.stringify(requestBody),\r\n//       method: method,\r\n//       headers: headers,\r\n//       credentials: \"include\",\r\n//     };\r\n\r\n//     fetch(`/admin/movies/${movie.id}`, requestOptions)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         if (data.error) {\r\n//           console.log(data.error);\r\n//         } else {\r\n//           navigate(\"/manage-catalogue\");\r\n//         }\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n//   };\r\n\r\n//   const handleChange = (event) => {\r\n//     let value = event.target.value;\r\n//     let name = event.target.name;\r\n//     setMovie({\r\n//       ...movie,\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//   const handleCheck = (event, position) => {\r\n//     console.log(\"handleCheck called\");\r\n//     console.log(\"value in handleCheck:\", event.target.value);\r\n//     console.log(\"Checked is\", event.target.checked);\r\n//     console.log(\"position is\", position);\r\n\r\n//     let tmpArr = movie.genres;\r\n//     tmpArr[position].checked = !tmpArr[position].checked;\r\n\r\n//     let tmpIDs = movie.genres_array;\r\n//     if (!event.target.checked) {\r\n//       tmpIDs.splice(tmpIDs.indexOf(event.target.value));\r\n//     } else {\r\n//       tmpIDs.push(parseInt(event.target.value, 10));\r\n//     }\r\n\r\n//     setMovie({\r\n//       ...movie,\r\n//       genres_array: tmpIDs,\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Add/Edit a movie</h2>\r\n//       <hr />\r\n//       <pre>{JSON.stringify(movie, null, 3)}</pre>\r\n\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input type=\"hidden\" name=\"id\" value={movie.id} id=\"id\"></input>\r\n//         <Input\r\n//           title={\"Title\"}\r\n//           className={\"form-control\"}\r\n//           type={\"text\"}\r\n//           name={\"title\"}\r\n//           value={movie.title}\r\n//           onChange={handleChange(\"title\")}\r\n//           errorDiv={hasError(\"title\") ? \"text-danger\" : \"d-none\"}\r\n//           errorMsg={\"Please enter a title\"}\r\n//         />\r\n\r\n//         <Input\r\n//           title={\"Release Date\"}\r\n//           className={\"form-control\"}\r\n//           type={\"release_date\"}\r\n//           name={\"title\"}\r\n//           value={movie.release_date}\r\n//           onChange={handleChange(\"release_date\")}\r\n//           errorDiv={hasError(\"release_date\") ? \"text-danger\" : \"d-none\"}\r\n//           errorMsg={\"Please enter a release date\"}\r\n//         />\r\n\r\n//         <Input\r\n//           title={\"Runtime\"}\r\n//           className={\"form-control\"}\r\n//           type={\"text\"}\r\n//           name={\"runtime\"}\r\n//           value={movie.runtime}\r\n//           onChange={handleChange(\"runtime\")}\r\n//           errorDiv={hasError(\"runtime\") ? \"text-danger\" : \"d-none\"}\r\n//           errorMsg={\"Please enter a runtime\"}\r\n//         />\r\n\r\n//         <Select\r\n//           title={\"MPAA Rating\"}\r\n//           name={\"mpaa_rating\"}\r\n//           options={mpaaOptions}\r\n//           onChange={handleChange(\"mpaa_rating\")}\r\n//           placeHolder={\"Choose...\"}\r\n//           errorMsg={\"Please Choose\"}\r\n//           errorDiv={hasError(\"mpaa_rating\") ? \"text-danger\" : \"d-none\"}\r\n//         />\r\n\r\n//         <TextArea\r\n//           title={\"Description\"}\r\n//           name={\"description\"}\r\n//           value={movie.description}\r\n//           rows={\"3\"}\r\n//           onChange={handleChange(\"description\")}\r\n//           errorMsg={\"Please enter a description\"}\r\n//           errorDiv={hasError(\"description\") ? \"text-danger\" : \"d-none\"}\r\n//         />\r\n\r\n//         <hr />\r\n\r\n//         <h3>Genres</h3>\r\n//         {movie.genres && movie.genres.length > 1 && (\r\n//           <>\r\n//             {Array.from(movie.genres).map((g, index) => (\r\n//               <Checkbox\r\n//                 title={g.genre}\r\n//                 name={\"genre\"}\r\n//                 key={index}\r\n//                 id={\"genre-\" + index}\r\n//                 onChange={(event) => handleCheck(event, index)}\r\n//                 value={g.id}\r\n//                 checked={movie.genres[index].checked}\r\n//               />\r\n//             ))}\r\n//           </>\r\n//         )}\r\n\r\n//         <hr />\r\n\r\n//         <button className=\"btn btn-primary\">Save</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EditMovie;\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useOutletContext, useParams } from \"react-router-dom\";\r\nimport Input from \"./form/Input\";\r\nimport Select from \"./form/Select\";\r\nimport TextArea from \"./form/TextArea\";\r\nimport Checkbox from \"./form/Checkbox\";\r\nimport { Swal } from \"sweetalert2\";\r\n\r\nconst EditMovie = () => {\r\n  const navigate = useNavigate();\r\n  const { jwtToken } = useOutletContext();\r\n\r\n  const [error, setError] = useState(null);\r\n  const [errors, setErrors] = useState([]);\r\n\r\n  const mpaaOptions = [\r\n    { id: \"G\", value: \"G\" },\r\n    { id: \"PG\", value: \"PG\" },\r\n    { id: \"PG13\", value: \"PG13\" },\r\n    { id: \"R\", value: \"R\" },\r\n    { id: \"NC17\", value: \"NC17\" },\r\n    { id: \"18A\", value: \"18A\" },\r\n  ];\r\n\r\n  const hasError = (key) => {\r\n    return errors.indexOf(key) !== -1;\r\n  };\r\n\r\n  const [movie, setMovie] = useState({\r\n    id: 0,\r\n    title: \"\",\r\n    release_date: \"\",\r\n    runtime: \"\",\r\n    mpaa_rating: \"\",\r\n    description: \"\",\r\n    genres: [],\r\n    genres_array: [Array(13).fill(false)],\r\n  });\r\n\r\n  let { id } = useParams();\r\n  if (id === undefined) {\r\n    id = 0;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (jwtToken === \"\") {\r\n      navigate(\"/login\");\r\n      return;\r\n    }\r\n\r\n    if (id === 0) {\r\n      /// Adding a movie....\r\n      setMovie({\r\n        id: 0,\r\n        title: \"\",\r\n        release_date: \"\",\r\n        runtime: \"\",\r\n        mpaa_rating: \"\",\r\n        description: \"\",\r\n        genres: [],\r\n        genres_array: [Array(13).fill(false)],\r\n      });\r\n\r\n      const headers = new Headers();\r\n      headers.append(\"Content-Type\", \"application/json\");\r\n\r\n      const requestOptions = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n\r\n      fetch(`/genres`, requestOptions)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const checks = [];\r\n          data.forEach((g) => {\r\n            checks.push({ id: g.id, checked: false, genre: g.genre });\r\n          });\r\n\r\n          setMovie((m) => ({\r\n            ...m,\r\n            genres: checks,\r\n            genres_array: [],\r\n          }));\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      // Edit existing movie logic\r\n      const headers = new Headers();\r\n      headers.append(\"Content-Type\", \"application/json\");\r\n      headers.append(\"Authorization\", \"Bearer \" + jwtToken);\r\n\r\n      const requestOptions = {\r\n        method: \"GET\",\r\n        headers: headers,\r\n      };\r\n\r\n      fetch(`/admin/movies/${id}`, requestOptions)\r\n        .then((response) => {\r\n          if (response.status !== 200) {\r\n            setError(\"Invalid response code: \" + response.status);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          /// Fix the release date...\r\n          data.movie.release_date = new Date();\r\n        });\r\n    }\r\n  }, [id, jwtToken, navigate]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    let errors = [];\r\n    let required = [\r\n      { field: movie.title, name: \"title\" },\r\n      { field: movie.release_date, name: \"release_date\" },\r\n      { field: movie.runtime, name: \"runtime\" },\r\n      { field: movie.description, name: \"description\" },\r\n      { field: movie.mpaa_rating, name: \"mpaa_rating\" },\r\n    ];\r\n\r\n    required.forEach((obj) => {\r\n      if (obj.field === \"\") {\r\n        errors.push(obj.name);\r\n      }\r\n    });\r\n\r\n    if (movie.genres_array.length === 0) {\r\n      Swal.fire({\r\n        title: \"Error!\",\r\n        text: \"You must choose at least one genre\",\r\n        icon: \"error\",\r\n        confirmButtonText: \"OK\",\r\n      });\r\n      errors.push(\"genres\");\r\n    }\r\n\r\n    setErrors(errors);\r\n    if (errors.length > 0) {\r\n      return false;\r\n    }\r\n\r\n    const headers = new Headers();\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n    headers.append(\"Authorization\", \"Bearer \" + jwtToken);\r\n\r\n    let method = \"PUT\";\r\n    if (movie.id > 0) {\r\n      method = \"PATCH\";\r\n    }\r\n\r\n    const requestBody = movie;\r\n    requestBody.release_date = new Date(movie.release_date);\r\n    requestBody.runtime = parseInt(movie.runtime, 10);\r\n\r\n    let requestOptions = {\r\n      body: JSON.stringify(requestBody),\r\n      method: method,\r\n      headers: headers,\r\n      credentials: \"include\",\r\n    };\r\n\r\n    fetch(`/admin/movies/${movie.id}`, requestOptions)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.error) {\r\n          console.log(data.error);\r\n        } else {\r\n          navigate(\"/manage-catalogue\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    let value = event.target.value;\r\n    let name = event.target.name;\r\n    setMovie({\r\n      ...movie,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleCheck = (event, position) => {\r\n    let tmpArr = movie.genres;\r\n    tmpArr[position].checked = !tmpArr[position].checked;\r\n\r\n    let tmpIDs = movie.genres_array;\r\n    if (!event.target.checked) {\r\n      tmpIDs.splice(tmpIDs.indexOf(event.target.value), 1);\r\n    } else {\r\n      tmpIDs.push(parseInt(event.target.value, 10));\r\n    }\r\n\r\n    setMovie({\r\n      ...movie,\r\n      genres_array: tmpIDs,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Add/Edit a movie</h2>\r\n      <hr />\r\n      {/* <pre>{JSON.stringify(movie, null, 3)}</pre> */}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"hidden\" name=\"id\" value={movie.id} id=\"id\" />\r\n        <Input\r\n          title={\"Title\"}\r\n          className={\"form-control\"}\r\n          type={\"text\"}\r\n          name={\"title\"}\r\n          value={movie.title}\r\n          onChange={handleChange}\r\n          errorDiv={hasError(\"title\") ? \"text-danger\" : \"d-none\"}\r\n          errorMsg={\"Please enter a title\"}\r\n        />\r\n        <Input\r\n          title={\"Release Date\"}\r\n          className={\"form-control\"}\r\n          type={\"date\"}\r\n          name={\"release_date\"}\r\n          value={movie.release_date}\r\n          onChange={handleChange}\r\n          errorDiv={hasError(\"release_date\") ? \"text-danger\" : \"d-none\"}\r\n          errorMsg={\"Please enter a release date\"}\r\n        />\r\n        <Input\r\n          title={\"Runtime\"}\r\n          className={\"form-control\"}\r\n          type={\"text\"}\r\n          name={\"runtime\"}\r\n          value={movie.runtime}\r\n          onChange={handleChange}\r\n          errorDiv={hasError(\"runtime\") ? \"text-danger\" : \"d-none\"}\r\n          errorMsg={\"Please enter a runtime\"}\r\n        />\r\n        <Select\r\n          title={\"MPAA Rating\"}\r\n          name={\"mpaa_rating\"}\r\n          options={mpaaOptions}\r\n          onChange={handleChange}\r\n          placeHolder={\"Choose...\"}\r\n          errorMsg={\"Please Choose\"}\r\n          errorDiv={hasError(\"mpaa_rating\") ? \"text-danger\" : \"d-none\"}\r\n        />\r\n        <TextArea\r\n          title={\"Description\"}\r\n          name={\"description\"}\r\n          value={movie.description}\r\n          rows={\"3\"}\r\n          onChange={handleChange}\r\n          errorMsg={\"Please enter a description\"}\r\n          errorDiv={hasError(\"description\") ? \"text-danger\" : \"d-none\"}\r\n        />\r\n        <hr />\r\n        <h3>Genres</h3>\r\n        {movie.genres && movie.genres.length > 1 && (\r\n          <>\r\n            {Array.from(movie.genres).map((g, index) => (\r\n              <Checkbox\r\n                title={g.genre}\r\n                name={\"genre\"}\r\n                key={index}\r\n                id={\"genre-\" + index}\r\n                onChange={(event) => handleCheck(event, index)}\r\n                value={g.id}\r\n                checked={movie.genres[index].checked}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n        <hr />\r\n        <button className=\"btn btn-primary\">Save</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditMovie;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}